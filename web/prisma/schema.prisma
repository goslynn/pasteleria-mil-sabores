// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  // output        = "../src/generated/prisma"
  engineType = "library"
  // binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  idUsuario       Int                  @id @default(autoincrement())
  nombre          String
  email           String               @unique
  password        String
  fechaNacimiento DateTime
  createdAt       DateTime             @default(now())
  preferencias    PreferenciasUsuario?
  carrito         CarritoCompras?
  pedidos         Pedido[]
  direccion       Direccion[]
}

model PreferenciasUsuario {
  ioPreferencia Int     @id @default(autoincrement())
  idUsuarioFk   Int     @unique
  // Relaci√≥n con User
  user          Usuario @relation(fields: [idUsuarioFk], references: [idUsuario])
  diaEntrega    String
  medioPago     String
}

model CarritoCompras {
  idCarrito   Int     @id @default(autoincrement())
  idUsuarioFk Int     @unique
  usuario     Usuario @relation(fields: [idUsuarioFk], references: [idUsuario])
}

model Descuento {
  idDescuento Int @id @default(autoincrement())
  referencia  Int
}

model Producto {
  idProducto          Int              @id @default(autoincrement())
  referenciaProductos Int
  carritoDetalle      CarritoDetalle[]
  precio              Precio[]
  //productoCategoria   ProductoCategoria[]
  detallePedido       DetallePedido[]
}

model CarritoDetalle {
  idCarrito  Int      @id @default(autoincrement())
  idProducto Int
  producto   Producto @relation(fields: [idProducto], references: [idProducto])
}

model Precio {
  idPrecio         Int      @id @default(autoincrement())
  idProductoFk     Int
  referenciaPrecio Int
  producto         Producto @relation(fields: [idProductoFk], references: [idProducto])
}

/**
 * model Categoria {
 * idCategoria       Int                 @id @default(autoincrement())
 * nombre            String
 * productoCategoria ProductoCategoria[]
 * }
 * model ProductoCategoria {
 * idPc          Int       @id @default(autoincrement())
 * idCategoriaFK Int
 * idProductoFk  Int
 * categoria     Categoria @relation(fields: [idCategoriaFK], references: [idCategoria])
 * producto      Producto  @relation(fields: [idProductoFk], references: [idProducto])
 * }
 */
model Pedido {
  idPedido      Int             @id @default(autoincrement())
  idUsuarioFk   Int
  fecha         String
  estado        String
  total         String
  usuario       Usuario         @relation(fields: [idUsuarioFk], references: [idUsuario])
  envio         Envio?
  detallePedido DetallePedido[]
}

model Envio {
  idEnvio       Int       @id @default(autoincrement())
  idPedidoFk    Int       @unique
  idDireccionFk Int
  fechaEnvio    String
  estadoEnvio   String
  pedido        Pedido    @relation(fields: [idPedidoFk], references: [idPedido])
  direccion     Direccion @relation(fields: [idDireccionFk], references: [idDireccion])
}

model DetallePedido {
  idDetalle      Int      @id @default(autoincrement())
  idPedidoFk     Int
  idProductoFk   Int      @unique
  cantidad       Float
  precioUnitario Float
  pedido         Pedido   @relation(fields: [idPedidoFk], references: [idPedido])
  producto       Producto @relation(fields: [idProductoFk], references: [idProducto])
}

model Pais {
  idPais   Int      @id @default(autoincrement())
  nombre   String   @unique
  regiones Region[]
}

model Region {
  idRegion Int      @id @default(autoincrement())
  nombre   String
  idPaisFk Int
  pais     Pais     @relation(fields: [idPaisFk], references: [idPais])
  comunas  Comuna[]
}

model Comuna {
  idComuna    Int         @id @default(autoincrement())
  nombre      String
  idRegionFk  Int
  region      Region      @relation(fields: [idRegionFk], references: [idRegion])
  direcciones Direccion[]
}

model Direccion {
  idDireccion      Int      @id @default(autoincrement())
  calle            String
  numero           String
  departamento     String?
  idComunaFk       Int
  comuna           Comuna   @relation(fields: [idComunaFk], references: [idComuna])
  envios           Envio[]
  Usuario          Usuario? @relation(fields: [usuarioIdUsuario], references: [idUsuario])
  usuarioIdUsuario Int?
}
